
package ch.arc.cours.a_motivation.comparator;

import java.util.Arrays;
import java.util.Comparator;

import ch.arc.cours.a_motivation.comparator.tools.Banane;
import ch.arc.cours.a_motivation.comparator.tools.ComparatorTools;

public class UseComparator
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		int n = 5;

		version1(n);
		version2(n);
		version3(n);
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private static void version1(int n)
		{
		Banane[] tab = ComparatorTools.createTab(n);

		Comparator<Banane> comparator = new ComparatorSeparer();

		ComparatorTools.print("Before", tab);
		Arrays.sort(tab, comparator); // sur place
		ComparatorTools.print("After", tab);
		}

	private static void version2(int n)
		{
		Banane[] tab = ComparatorTools.createTab(n);

		Comparator<Banane> comparator = new Comparator<Banane>()
			{

			@Override public int compare(Banane b1, Banane b2)
				{
				return Integer.compare(b1.getPoids(), b2.getPoids());
				}
			};

		//ComparatorTools.print("Before",tab);
		Arrays.sort(tab, comparator); // sur place
		ComparatorTools.print("After", tab);
		}

	private static void version3(int n)
		{
		Banane[] tab = ComparatorTools.createTab(n);

		//ComparatorTools.print("Before",tab);

		Arrays.sort(tab, new Comparator<Banane>()
			{

			@Override public int compare(Banane b1, Banane b2)
				{
				return Integer.compare(b1.getPoids(), b2.getPoids());
				}
			}); // sur place

		ComparatorTools.print("After", tab);
		}

	}
