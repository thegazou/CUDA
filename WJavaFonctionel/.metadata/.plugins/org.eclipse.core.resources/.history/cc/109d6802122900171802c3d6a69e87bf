
package ch.arc.cours.lamda.interfacefonctionelle.neu.existant.binaryoperator;

import java.util.Arrays;
import java.util.function.BinaryOperator;

import org.junit.Assert;



public class UseBInaryOperator
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		int n=3;
		int[] tab=create(n);

		int sum = version1(tab);

		System.out.println("sum = "+sum);
		System.out.println(Arrays.toString(tab));

		Assert.assertTrue(sum==n*(n+1)/2);
		}



	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/**
	 * classe interne anonyme
	 */
	private static int version1(int[] tab)
		{
		BinaryOperator<Integer> add=new BinaryOperator<Integer>()
			{

			@Override
			public Integer apply(Integer v1, Integer v2)
				{
				return v1+v2;
				}
			};

		return NumberManipulator.reduce(tab, add, 0);
		}

	/**
	 * classe interne anonyme
	 */
	private static int version2(int[] tab)
		{
		BinaryOperator<Integer> add= (x1,x2) -> x1+x2;

		return NumberManipulator.reduce(tab, add, 0);
		}

	/**
	 * [1,n]
	 */
	private static int[] create(int n)
		{
		int[] tab = new int[n];

		for(int i = 0; i < n; i++)
			{
			tab[i] = i+1;
			}

		return tab;
		}

	}
