
package ch.arc.cours.lamda.interfacefonctionelle.neu.custom;

import org.junit.Assert;

public class UseCustom
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		// add
			{
			System.out.println("Add");

			useAdd1();
			useAdd2();
			useAdd3();
			}

		// composition
			{
			System.out.println("Composition");

			useComposition1();
			useComposition2();
			useComposition3();
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/*------------------------------*\
	|*		add						*|
	\*------------------------------*/

	/**
	 * x -> (2*x)+ (x+1)
	 *
	 * h(x)= 2*x
	 * g(x)= x+1
	 * (g + h) (x)= h(x)+g(x)
	 *
	 * Classe interne anonyme
	 */
	private static void useAdd1()
		{
		Function_I h = new Function_I()
			{

			@Override
			public double value(double x)
				{
				return x + 1;
				}
			};

		Function_I g = new Function_I()
			{

			@Override
			public double value(double x)
				{
				return 2 * x;
				}
			};

		Function_I u1 = FunctionAdd.add1(h, g);
		Function_I u2 = FunctionAdd.add2(h, g);
		Function_I u3 = FunctionAdd.add3(h, g);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u2.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u3.value(2) == (2 + 1) + (2 * 2));
		}

	/**
	 * x -> (2*x)+ (x+1)
	 *
	 * h(x)= 2*x
	 * g(x)= x+1
	 * (g + h) (x)= h(x)+g(x)
	 *
	 * Classe interne anonyme
	 */
	private static void useAdd2()
		{
		Function_I h = x -> 2 * x;
		Function_I g = x -> x + 1;

		Function_I u1 = FunctionAdd.add1(h, g);
		Function_I u2 = FunctionAdd.add2(h, g);
		Function_I u3 = FunctionAdd.add3(h, g);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u2.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u3.value(2) == (2 + 1) + (2 * 2));
		}

	/**
	 * x -> (2*x)+ (x+1)
	 *
	 * h(x)= 2*x
	 * g(x)= x+1
	 * (g + h) (x)= h(x)+g(x)
	 *
	 * Classe interne anonyme
	 */
	private static void useAdd3()
		{
		Function_I u1 = FunctionAdd.add1(x -> 2 * x, x -> x + 1);
		Function_I u2 = FunctionAdd.add2(x -> 2 * x, x -> x + 1);
		Function_I u3 = FunctionAdd.add3(x -> 2 * x, x -> x + 1);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u2.value(2) == (2 + 1) + (2 * 2));
		Assert.assertTrue(u3.value(2) == (2 + 1) + (2 * 2));
		}

	/*------------------------------*\
	|*		composition				*|
	\*------------------------------*/

	/**
	 * x -> x*x+1
	 *
	 * h(x)= x+1
	 * g(x)= x*x
	 * (g o h) (x)= h(g(x))
	 *
	 * Classe interne anonyme
	 */
	private static void useComposition1()
		{
		Function_I g = new Function_I()
			{

			@Override
			public double value(double x)
				{
				return x + 1;
				}
			};

		Function_I h = new Function_I()
			{

			@Override
			public double value(double x)
				{
				return x * x;
				}
			};

		Function_I u1 = FunctionCompose.composition1(h, g);
		Function_I u2 = FunctionCompose.composition2(h, g);
		Function_I u3 = FunctionCompose.composition3(h, g);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u2.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u3.value(2) == 2 * 2 + 1);
		}

	/**
	 * x -> x*x+1
	 *
	 * h(x)= x+1
	 * g(x)= x*x
	 * (g o h) (x)= h(g(x))
	 *
	 * lamda dans variable
	 */
	private static void useComposition2()
		{
		Function_I g = x -> x + 1;
		Function_I h = x -> x * x;

		Function_I u1 = FunctionCompose.composition1(h, g);
		Function_I u2 = FunctionCompose.composition2(h, g);
		Function_I u3 = FunctionCompose.composition3(h, g);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u2.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u3.value(2) == 2 * 2 + 1);
		}

	/**
	 * x -> x*x+1
	 *
	 * h(x)= x+1
	 * g(x)= x*x
	 * (g o h) (x)= h(g(x))
	 *
	 * lamda
	 */
	private static void useComposition3()
		{
		Function_I u1 = FunctionCompose.composition1(x -> x * x, x -> x + 1);
		Function_I u2 = FunctionCompose.composition2(x -> x * x, x -> x + 1);
		Function_I u3 = FunctionCompose.composition3(x -> x * x, x -> x + 1);

		System.out.println(u1.value(2));
		System.out.println(u2.value(2));
		System.out.println(u3.value(2));

		Assert.assertTrue(u1.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u2.value(2) == 2 * 2 + 1);
		Assert.assertTrue(u3.value(2) == 2 * 2 + 1);
		}

	}
