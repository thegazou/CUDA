
package ch.arc.cours.lamda.interfacefonctionelle.neu.existant;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.function.Consumer;
import java.util.function.Predicate;

import ch.arc.cours.lamda.interfacefonctionelle.neu.existant.tools.Homme;

public class HommeManipuleur
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	/*------------------------------*\
	|*			  Static			*|
	\*------------------------------*/

	public static Iterable<Homme> create(int n)
		{
		long seed = 1;
		Random random = new Random(seed);

		List<Homme> list = new ArrayList<Homme>(n);

		for(int i = 0; i < n; i++)
			{
			Homme homme = new Homme(random.nextInt(10), random.nextInt(100));
			list.add(homme);
			}

		return list;
		}

	public static Iterable<Homme> filter(Iterable<Homme> iterable, Predicate<Homme> predicate)
		{
		List<Homme> list = new ArrayList<Homme>();

		for(Homme homme:iterable)
			{
			if (predicate.test(homme))
				{
				list.add(homme);
				}
			}

		return list;
		}

	/**
	 * sur place, modifie homme
	 */
	public static void modify(Iterable<Homme> iterable, Consumer<Homme> consumer)
		{
		for(Homme homme:iterable)
			{
			consumer.accept(homme);
			}


		}

	/**
	 * sur place, modifie homme filtrer
	 */
	public static void filterModify(Iterable<Homme> iterable, Predicate<Homme> predicate, Consumer<Homme> consumer)
		{
		for(Homme homme:iterable)
			{
			if (predicate.test(homme))
				{
				consumer.accept(homme);
				}
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	}
