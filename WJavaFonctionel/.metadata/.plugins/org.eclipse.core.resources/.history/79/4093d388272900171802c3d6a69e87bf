
package ch.arc.cours.lamda.interfacefonctionelle.neu.existant.consumerprediacte.predicate;

import java.util.function.Predicate;

import ch.arc.cours.lamda.interfacefonctionelle.neu.existant.consumerprediacte.HommeManipulator;
import ch.arc.cours.lamda.interfacefonctionelle.neu.existant.consumerprediacte.tools.Homme;

public class UsePredicate
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		int n = 10;

		version1(n);

		// lamda
			{
			version2(n);
			version3(n);
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private static void version1(int n)
		{
		Iterable<Homme> iterable = HommeManipulator.create(n);

		Iterable<Homme> iterableFiltrer = HommeManipulator.filter(iterable, new Predicate<Homme>()
			{

			@Override
			public boolean test(Homme h)
				{
				return h.getHauteur()>50;
				}
			});

		System.out.println(iterableFiltrer);
		}

	/*------------------------------*\
	|*				lamda			*|
	\*------------------------------*/

	private static void version2(int n)
		{
		Iterable<Homme> iterable = HommeManipulator.create(n);

		//Iterable<Homme> iterableFiltrer = HommeTools.filter(iterable, h -> {return h.getHauteur()>50;}); // return required {}
		Iterable<Homme> iterableFiltrer = HommeManipulator.filter(iterable, h ->  h.getHauteur()>50);

		System.out.println(iterableFiltrer);
		}

	private static void version3(int n)
		{
		Iterable<Homme> iterable = HommeManipulator.create(n);

		// Predicate<Homme> predicat=h -> {return h.getHauteur()>50;};  // return required {}
		Predicate<Homme> predicat=h -> h.getHauteur()>50;

		Iterable<Homme> iterableFiltrer = HommeManipulator.filter(iterable,predicat );

		System.out.println(iterableFiltrer);
		}

	}
