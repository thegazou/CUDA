
package ch.arc.cours.lamda.interfacefonctionelle.neu.custom;

import org.junit.Assert;

public class UseCustom
	{
	
	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/
	
	public static void main(String[] args)
		{
		main();
		}
		
	public static void main()
		{
		useComposition();
		}
		
	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/
	
	/**
	 *
	 * x -> x*x+1
	 *
	 * h(x)=x+1
	 * g(x)= x*x
	 * (g o h) (x)= h(g(x))
	 */
	private static void useComposition()
		{
		Function_I g = new Function_I()
			{
			
			@Override
			public double f(double x)
				{
				return x + 1;
				}
			};
		
		Function_I h = new Function_I()
			{
			
			@Override
			public double f(double x)
				{
				return x * x;
				}
			};
		
		Function_I u1 = FunctionTools.composition1(h, g);
		Function_I u2 = FunctionTools.composition1(h, g);
		Function_I u3 = FunctionTools.composition1(h, g);
		
		System.out.println(u1.f(2));
		System.out.println(u2.f(2));
		System.out.println(u3.f(2));
		
		Assert.assertTrue(u1.f(2) == 2 * 2 + 1);
		Assert.assertTrue(u2.f(2) == 2 * 2 + 1);
		Assert.assertTrue(u3.f(2) == 2 * 2 + 1);
		
		}
		
	}
