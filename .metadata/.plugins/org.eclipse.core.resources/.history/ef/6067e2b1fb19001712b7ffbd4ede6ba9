#include <iostream>
#include "Grid.h"
#include "Device.h"
#include "MathTools.h"
#include "limits.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

#include "Montecarlo.h"
#include "Montecarlo2.h"

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

bool useMontecarlo(void);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/
bool useMontecarlo1(void);
bool useMontecarlo2(void);
/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
bool useMontecarlo()
    {
    float result;

    // Grid cuda

    dim3 dg = dim3(2, 1, 1); //
    dim3 db = dim3(1024, 1, 1);  //faire varier puissance de 2
    Grid grid(dg, db);
    result = useMontecarlo1();
    result = useMontecarlo2();
    printf("Result = %f\n", result);

    bool isOk = MathTools::isEquals(result, PI_FLOAT, 0.01f);

    return isOk;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

bool useMontecarlo1()
    {
    //uint nbFlecheByThread = INT_MAX - 1;
    //nbFlecheByThread *= 2;
    int nbFlecheTotal = INT_MAX;

    Montecarlo montecarlo(grid, nbFlecheTotal);
    montecarlo.run();
    result = montecarlo.getResult();

    }

bool useMontecarlo2()
    {
    //uint nbFlecheByThread = INT_MAX - 1;
    //nbFlecheByThread *= 2;
    int nbFlecheTotal = INT_MAX;
    float result;

    // Grid cuda

    dim3 dg = dim3(2, 1, 1); //
    dim3 db = dim3(1024, 1, 1);  //faire varier puissance de 2
    Grid grid(dg, db);

    Montecarlo montecarlo(grid, nbFlecheTotal);
    montecarlo.run();
    result = montecarlo.getResult();
    printf("Result = %f\n", result);

    bool isOk = MathTools::isEquals(result, PI_FLOAT, 0.01f);

    return isOk;
    }
/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

