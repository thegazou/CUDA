#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"

#include "Sphere.h"
#include "RaytracingMath.h"
#include "length_cm.h"

#include "IndiceTools_GPU.h"
using namespace gpu;

__constant__ Sphere TAB_CM[LENGTH_CM];

static __device__ void copyGMtoSM(Sphere* ptrDevTabGM, Sphere* ptrDevTabSM, uint nbSphere);
static __device__ void raytracing(uchar4* ptrDevPixels, uint w, uint h, float t, Sphere* ptrDevTabSphere, uint nbSphere);
static __host__ void uploadGPU(Sphere* ptrTabSphere);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

__host__ void uploadGPU(Sphere* ptrTabSphere)
    {
    size_t size = LENGTH_CM * sizeof(Sphere);
    int offset = 0;
    HANDLE_ERROR(cudaMemcpyToSymbol(TAB_CM, ptrTabSphere, size, offset, cudaMemcpyHostToDevice));
    }

__device__ void copyGMtoSM(Sphere* ptrDevTabGM, Sphere* ptrDevTabSM, uint nbSphere)
    {
    const int TID_LOCAL = Indice2D::tidLocal();
    const int NB_THREAD_LOCAL = Indice2D::nbThreadLocal();

    int s = TID_LOCAL;
    while (s < nbSphere)
	{
	ptrDevTabSM[s] = ptrDevTabGM[s];
	s += NB_THREAD_LOCAL;
	}
    }

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void raytracingGM(uchar4* ptrDevPixels, uint w, uint h, float t, Sphere* ptrDevTabSphere, uint nbSphere)
    {
    raytracing(ptrDevPixels, w, h, t, ptrDevTabSphere, nbSphere);
    }

__global__ void raytracingCM(uchar4* ptrDevPixels, uint w, uint h, float t)
    {
    raytracing(ptrDevPixels, w, h, t, nullptr, LENGTH_CM);
    }

__global__ void raytracingSM(uchar4* ptrDevPixels, uint w, uint h, float t, Sphere* ptrDevTabSphere, uint nbSphere)
    {
    extern __shared__ Sphere
    ptrDevTabSM[LENGTH_CM];
    copyGMtoSM(ptrDevTabSphere, ptrDevTabSM, nbSphere);
    syncthreads();
    raytracing(ptrDevPixels, w, h, t, ptrDevTabSphere, nbSphere);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void raytracing(uchar4* ptrDevPixels, uint w, uint h, float t, Sphere* ptrDevTabSphere, uint nbSphere)
    {
    RaytracingMath raytracingMath = RaytracingMath(ptrDevTabSphere, nbSphere);

    const int WH = w * h;
    const int TID = Indice2D::tid();
    const int NB_THREAD = Indice2D::nbThread();
	{
	IndiceTools::toIJ(s, w, &i, &j);

	raytracingMath.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	s += NB_THREAD;
	}
    THREAD = Indice2D::nbThread();

    int i, j;
	{
	IndiceTools::toIJ(s, w, &i, &j);

	raytracingMath.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	s += NB_THREAD;
	}
    int s = TID;
    while (s < WH)
	{
	    {
	    IndiceTools::toIJ(s, w, &i, &j);

	    raytracingMath.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	    s += NB_THREAD;
	    }
	IndiceTools::toIJ(s, w, &i, &j);

	raytracingMath
	    {
	    IndiceTools::toIJ(s, w, &i, &j);

	    raytracingMath.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	    s += NB_THREAD;
	    }.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	s += NB_THREAD;
	}
	{
	IndiceTools::toIJ(s, w, &i, &j);

	raytracingMath.colorIJ(&ptrDevPixels[s], (float) i, (float) j, t);

	s += NB_THREAD;
	}
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

