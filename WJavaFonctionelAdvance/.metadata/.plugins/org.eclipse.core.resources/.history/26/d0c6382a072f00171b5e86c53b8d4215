
package ch.arc.cours.lamda.c_stream;

import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.ToIntFunction;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.junit.Assert;

import ch.arc.cours.lamda.c_stream.tools.Personne;
import ch.arc.cours.lamda.c_stream.tools.PersonneTools;

public class UseStream_05_parallel
	{
	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		int n = 5;

		System.out.println("stream : parallel");

		list(n);
		array();
		iterable(n);
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/**
	 * Quoi : 	 	filter			mapToInt	sum
	 * Comment :	Predicate<T> 	age			sum
	 *
	 * Probleme :	somme des hauteur des personnes dont age > 50
	 */
	private static void list(int n)
		{
		List<Personne> list = PersonneTools.create(n);

		System.out.println(list);

		// lamda dans varibale, reference methode si possible
			{
			Predicate<Personne> ageBigger50 = p -> p.getAge() > 50;
			ToIntFunction<Personne> hauteur = Personne::getHauteur;

			int sumHauteur = list.parallelStream().filter(ageBigger50).mapToInt(hauteur).sum();

			System.out.println("sumHauteur avec age >50  : " + sumHauteur);
			}
		}

	/**
	 * Quoi : 	 	reduce
	 * Comment :	BinaryOperator
	 *
	 * Probleme :	somme entiers in [1,9]
	 * Contrainte : stream parallel
	 */
	private static void array()
		{
		Integer[] tab = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		// v1
			{
			int sum = Arrays.stream(tab).parallel().reduce(0, Integer::sum);

			// check
				{
				int n = tab.length;
				int sumTrue = n * (n + 1) / 2;
				Assert.assertTrue(sum == sumTrue);
				}
			}

		// variante : idem mais que des 5 premiers élément de la stream. Use limit
			{
			int m = 5;
			int sum = Arrays.stream(tab).limit(m).parallel().reduce(0, Integer::sum);

			// check
				{
				int sumTrue = m * (m + 1) / 2;
				Assert.assertTrue(sum == sumTrue);
				}
			}
		}

	/**
	 * Quoi : 	 	filter			mapToInt	sum
	 * Comment :	Predicate<T> 	age			sum
	 *
	 * Probleme :	somme des hauteur des personnes dont age > 50
	 */
	private static void iterable(int n)
		{
		List<Personne> list = PersonneTools.create(n);
		work(list);
		}

	private static void work(Iterable<Personne> iterable)
		{
		boolean isParallel = true;
		Stream<Personne> stream = StreamSupport.stream(iterable.spliterator(), isParallel);

		Assert.assertTrue(stream.isParallel() == isParallel);

		int sumHauteur = stream.filter(p -> p.getAge() > 50).mapToInt(Personne::getHauteur).sum();

		System.out.println("sumHauteur avec age >50  : " + sumHauteur);
		}

	}
