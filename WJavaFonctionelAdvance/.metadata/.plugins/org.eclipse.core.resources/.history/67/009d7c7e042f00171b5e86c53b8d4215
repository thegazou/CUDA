
package ch.arc.cours.lamda.d_referencemethode;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.stream.Collectors;

import javax.swing.JButton;

import org.junit.Assert;

import ch.arc.cours.lamda.a_interfacefonctionelle.b_neu.d_function.b_map.tools.Maison;
import ch.arc.cours.lamda.d_referencemethode.tools.IntegerTools;
import ch.arc.cours.lamda.d_referencemethode.tools.JFrameBouton;

public class UseReferenceMethode
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		methodeStatic();

		methode0();
		methode1();
		methode2();
		methode3();

		constructeur1();
		constructeur2();
		constructeur3();

		// convertion
			{
			arraytoList();
			listToArray();
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/*------------------------------*\
	|*				Static			*|
	\*------------------------------*/

	private static void methodeStatic()
		{
		// classe interne anonyme
			{
			Function<Double, Double> f = new Function<Double, Double>()
				{

				@Override
				public Double apply(Double t)
					{
					return Math.abs(t);
					}
				};

			Assert.assertTrue(f.apply(-1d) == 1);
			}

		// lamda reference
			{
			Function<Double, Double> f = x -> Math.abs(x);

			Assert.assertTrue(f.apply(-1d) == 1);
			}

		// lamda reference methode
			{
			Function<Double, Double> f = Math::abs;

			Assert.assertTrue(f.apply(-1d) == 1);
			}
		}

	/*------------------------------*\
	|*			non	Static			*|
	\*------------------------------*/

	/**
	 * sum des nombres paires
	 */
	private static void methode0()
		{
		// lamda
			{
			Integer[] tab = { 1, 2, 3, 4, 5, 6, 7, 8 };

			Integer sumPaire = Arrays.stream(tab).filter(x -> IntegerTools.isPaire(x)).reduce(0, (x1, x2) -> x1 + x2);

			Assert.assertTrue(sumPaire == 2 + 4 + 6 + 8);
			}

		// lamda refernce methode
		//		isPaire
		//		add
			{
			Integer[] tab = { 1, 2, 3, 4, 5, 6, 7, 8 };

			Integer sumPaire = Arrays.stream(tab).filter(IntegerTools::isPaire).reduce(0, Integer::sum);

			Assert.assertTrue(sumPaire == 2 + 4 + 6 + 8);
			}
		}

	/**
	 * sum des prix des maisons
	 */
	private static void methode1()
		{

		// lamda
			{
			Maison[] tab = { new Maison(1, 10, 100), new Maison(2, 20, 200) }; // prix piece surface
			Integer prixTotal = Arrays.stream(tab).map(m -> m.getPrix()).reduce(0, (p1, p2) -> p1 + p2);

			Assert.assertTrue(prixTotal == 3);
			}

		// lamda refernce methode
		//		prix
		//		add
			{
			Maison[] tab = { new Maison(1, 10, 100), new Maison(2, 20, 200) }; // prix piece surface
			Integer prixTotal = Arrays.stream(tab).map(Maison::getPrix).reduce(0, Integer::sum);

			Assert.assertTrue(prixTotal == 3);
			}
		}

	/**
	 * tri d'un tableau de string
	 */
	private static void methode2()
		{
		// classe interne anonyme
			{
			String[] tab = { "maison", "banane", "Meteo", "repas" };

			System.out.println("avant : " + Arrays.asList(tab));

			Comparator<String> comparator = new Comparator<String>()
				{

				@Override
				public int compare(String s1, String s2)
					{
					return s1.compareToIgnoreCase(s2);
					}
				};
			Arrays.sort(tab, comparator); // sur place

			System.out.println("après : " + Arrays.asList(tab));
			}

		// lamda
			{
			String[] tab = { "maison", "banane", "Meteo", "repas" };

			Arrays.sort(tab, (s1, s2) -> s1.compareToIgnoreCase(s2)); // sur place

			System.out.println("après : " + Arrays.asList(tab));
			}

		// lamda  reference methode
			{
			String[] tab = { "maison", "banane", "Meteo", "repas" };

			Arrays.sort(tab, String::compareToIgnoreCase); // sur place

			System.out.println("après : " + Arrays.asList(tab));
			}
		}

	/**
	 * click dans un JButton (swing), afficher l'event
	 */
	private static void methode3()
		{
		// Classe interne anonyme
			{
			JButton button = new JButton("click");
			button.addActionListener(new ActionListener()
				{

				@Override
				public void actionPerformed(ActionEvent e)
					{
					System.out.println(e);
					}
				});

			new JFrameBouton(button, "click classe interne anonyme");
			}

		// lamda
			{
			JButton button = new JButton("click");
			button.addActionListener(e -> System.out.println(e));

			new JFrameBouton(button, "click lamada");
			}

		// lamda reference methode
			{
			JButton button = new JButton("click");
			button.addActionListener(System.out::println);

			new JFrameBouton(button, "click lamda reference methode");
			}

		}

	/*------------------------------*\
	|*				Constructeur	*|
	\*------------------------------*/

	/**
	 * Construire une liste de nombres depuis un tableau de string
	 *
	 * Indication : map collect Collectors
	 */
	private static void constructeur1()
		{
		// lamda
			{
			try
				{
				String[] tab = { "1", "2", "3", "4" };
				List<Number> list = Arrays.stream(tab).map(n -> new Integer(n)).collect(Collectors.toList());
				System.out.println(list);
				}
			catch (Exception e)
				{
				System.out.println("impossible");
				}
			}

		// lamda , reference methode
			{

			try
				{
				String[] tab = { "1", "2", "3", "4" };
				List<Number> list = Arrays.stream(tab).map(Integer::new).collect(Collectors.toList());
				System.out.println(list);
				}
			catch (Exception e)
				{
				System.out.println("impossible");
				}
			}
		}

	/**
	 * Construire une liste de bouttons depuis un tableau de string
	 * Construire un set de bouttons depuis un tableau de string
	 *
	 * Indication : map collect Collectors
	 */
	private static void constructeur2()
		{
		// lamda
			{
			String[] tabLabel = { "b1", "b2", "b3", "b4" };

			// list
				{
				List<JButton> list = Arrays.stream(tabLabel).map(label -> new JButton(label)).collect(Collectors.toList());

				new JFrameBouton(list, "list : lamda");
				}

			// set
				{
				Set<JButton> set = Arrays.stream(tabLabel).map(label -> new JButton(label)).collect(Collectors.toSet());

				new JFrameBouton(set, "set : lamda ");
				}
			}

		// lamda, reference constructeur
			{
			String[] tabLabel = { "b1", "b2", "b3", "b4" };

			// list
				{
				List<JButton> list = Arrays.stream(tabLabel).map(JButton::new).collect(Collectors.toList());

				new JFrameBouton(list, "list : lamda : constructeur reference");
				}

			// set
				{
				Set<JButton> set = Arrays.stream(tabLabel).map(JButton::new).collect(Collectors.toSet());

				new JFrameBouton(set, "set : lamda : constructeur reference");
				}

			// array (difficile)
				{
				// voir example ci-dessous, complexe!
				}

			}
		}

	/**
	 * Construire une array de bouttons depuis un tableau de string
	 *
	 * Indication : toArray
	 */
	private static void constructeur3()
		{
		String[] tabLabel = { "b1", "b2", "b3", "b4" };

		// lamda dans variable, sans reference de methode
			{
			// on recoit un int, on doit fabriquer un tableau de JButton
			IntFunction<JButton[]> generator= n -> new JButton[n];

			JButton[] tab = Arrays.stream(tabLabel).map(JButton::new).toArray(generator);

			new JFrameBouton(tab, "toArray : lamda : constructeur reference 1");
			}

		// lamda dans variable, avec reference de methode
			{
			IntFunction<JButton[]> generator= JButton[]::new;

			JButton[] tab = Arrays.stream(tabLabel).map(JButton::new).toArray(generator);

			new JFrameBouton(tab, "toArray : lamda : constructeur reference 1");
			}

		// lamda sans variable, avec reference de methode
			{
			JButton[] tab = Arrays.stream(tabLabel).map(JButton::new).toArray(JButton[]::new);

			new JFrameBouton(tab, "toArray : lamda : constructeur reference 3");
			}
		}

	/*------------------------------*\
	|*				convertion 		*|
	\*------------------------------*/

	/**
	 * transformation d'un tableau en list
	 */
	private static void arraytoList()
		{
		Integer[] tab = { 1, 2, 3 };

		System.out.println("array :" + Arrays.toString(tab));

		// avec stream
			{
			List<Integer> list = Arrays.stream(tab).collect(Collectors.toList());

			System.out.println("list " + list);
			}

		// sans stream
			{
			List<Integer> list = Arrays.asList(tab);

			System.out.println("list " + list);
			}
		}

	/**
	 * transformation d'une liste en tableau
	 */
	private static void listToArray()
		{
		List<Integer> list = Arrays.asList(1, 2, 3);

		// lamda dans variable, sans reference de methode
			{
			// on recoit un int, on doit fabriquer un tableau de Integer
			IntFunction<Integer[]> generator = n -> new Integer[n];
			Integer[] tab = list.stream().toArray(generator);

			System.out.println(Arrays.toString(tab));
			}

		// lamda dans variable, avec reference de methode
			{
			IntFunction<Integer[]> generator = Integer[]::new;
			Integer[] tab = list.stream().toArray(generator);

			System.out.println(Arrays.toString(tab));
			}

		// lamda sans variable, avec avec reference de methode
			{
			Integer[] tab = list.stream().toArray(Integer[]::new);

			System.out.println(Arrays.toString(tab));
			}
		}

	}
