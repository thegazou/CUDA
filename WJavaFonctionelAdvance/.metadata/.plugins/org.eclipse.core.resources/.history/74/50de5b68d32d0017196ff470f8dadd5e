
package ch.arc.cours.lamda.interfacefonctionelle.neu.existant.binaryoperator.objet;

import java.util.Comparator;
import java.util.List;
import java.util.function.BinaryOperator;

import ch.arc.cours.lamda.interfacefonctionelle.neu.existant.binaryoperator.objet.tools.Voiture;
import ch.arc.cours.lamda.interfacefonctionelle.neu.existant.binaryoperator.objet.tools.VoitureTools;

public class UseReduceMin
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		System.out.println("reduce : BinaryOperator : min");
		reduceAdd();
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private static void reduceAdd()
		{
		int n = 3;
		List<Voiture> list = VoitureTools.create(n);

		Voiture voitureCheap = minPrix(list);

		System.out.println(list);
		System.out.println("Cheap : " + voitureCheap);
		}

	/*------------------------------*\
	|*		BinaryOperator min		*|
	\*------------------------------*/

	/**
	 * Voiture dont le prix est minimimum
	 *
	 * lamda dans variable
	 *
	 * Warning : l'output n'est pas le prix de la voiture la moins cher, mais la voiture la moins cher!
	 */
	private static Voiture minPrix(List<Voiture> list)
		{
		// TODO
		Comparator<Voiture> comparator =;
		BinaryOperator<Voiture> operator = BinaryOperator.minBy(comparator);
		}

	/**
	 * Voiture dont le prix est minimimum
	 *
	 * lamda dans variable
	 *
	 * Warning : l'output n'est pas le prix de la voiture la plus cher, mais la voiture la plus cher!
	 */
	private static Voiture maxPrix(List<Voiture> list)
		{
		// TODO
		Comparator<Voiture> comparator =;
		BinaryOperator<Voiture> operator = BinaryOperator.maxBy(comparator);
		}

	}
